payable contract Post=
  record post ={
    id:int,
    title:string,
    content:string,
    author:address,
    tipped:int,
    timestamp:int,
    updated:int}
  record state ={
      post_counter:int,
      posts:map(int,post)}
  entrypoint init()={
    post_counter=0,
    posts={}}
  entrypoint getPostLength():int=
    state.post_counter

  stateful entrypoint create_post(
                        _title:string,
                        _content:string) =
    require(_title != "", "Title Needed")
    require(_content !=  "", "Content is Needed")
    if(_title != "" && _content != "")
        let new_post = {
                        id=getPostLength() + 1,
                        title=_title,
                        content=_content, 
                        timestamp=Chain.timestamp,
                        updated=Chain.timestamp,
                        author = Call.caller,
                        tipped=0}
        let index = getPostLength() + 1
        put(state{posts[index]=new_post,post_counter=index})
    
  entrypoint get_post_by_index(index:int) : post = 
    switch(Map.lookup(index, state.posts))
        None => abort("Post does not exist with this index")
        Some(x) => x  
  
  payable stateful entrypoint tip_post(_id :int)=
    let post = get_post_by_index(_id) 
    let post_author  = post.author : address
    Chain.spend(post_author, Call.value)
    let post_tipped = post.tipped + Call.value
    if(Call.value > 0)
      let updated_post = {id=post.id,
                title=post.title,
                content=post.content,
                timestamp=post.timestamp,
                author = post.author,
                tipped=post_tipped,
                updated=Chain.timestamp
                }
      put(state{posts[_id]=updated_post})
    else
      abort("NOT ENOUGH ae")